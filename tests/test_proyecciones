import unittest
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.Projections.model import Base, Proyeccion, ProyeccionRecetas
from src.Recipes.model import Receta
from src.Users.model import Usuario
from Projections.controller import ProyeccionController

## @brief Test class for the ProyeccionController, which includes unit tests for CRUD operations on projections.
class TestProyeccionController(unittest.TestCase):

    ## @brief Set up the test environment by creating an in-memory SQLite database and session.
    def setUp(self):
        ## Setup: Create an in-memory SQLite database and session for testing.
        self.engine = create_engine('sqlite:///:memory:')  # Usar base de datos en memoria para pruebas
        Base.metadata.create_all(self.engine)
        self.Session = sessionmaker(bind=self.engine)
        self.session = self.Session()

        # Crear un usuario y una receta para usar en las pruebas
        self.usuario = Usuario(numero_usuario=1, nombre="Usuario 1")
        self.session.add(self.usuario)
        self.session.commit()

        self.receta = Receta(numero_receta=1, nombre="Receta 1")
        self.session.add(self.receta)
        self.session.commit()

    ## Create the Proyeccion table in the in-memory database.
    def tearDown(self):
        ## Teardown: Close the session and drop all tables after each test.
        self.session.close()
        Base.metadata.drop_all(self.engine)
        self.engine.dispose()

    ## @brief Test creating a new Proyeccion in the database.
    def test_create_proyeccion(self):
        ## Test creating a new Proyeccion.
        controller = ProyeccionController()
        recetas = [{'id_receta': 1, 'porcentaje': 50}, {'id_receta': 1, 'porcentaje': 50}]
        proyeccion = controller.create_projection(self.session, numero_usuario=1, nombre="Proyeccion 1", periodo="2025", comensales=4, recetas=recetas)

        # Print the created proyeccion
        print(f"Proyeccion creada con ID: {proyeccion.id_proyeccion}, nombre: {proyeccion.nombre}")

        ## Assert that the proyeccion was created correctly.
        self.assertIsNotNone(proyeccion.id_proyeccion)
        self.assertEqual(proyeccion.nombre, "Proyeccion 1")
        self.assertEqual(len(proyeccion.recetas), 2)
        self.assertEqual(proyeccion.recetas[0].id_receta, 1)
        self.assertEqual(proyeccion.recetas[1].id_receta, 1)

    ## @brief Test reading a Proyeccion from the database.
    def test_read_proyeccion(self):
        ## Test reading a Proyeccion from the database.
        controller = ProyeccionController()
        recetas = [{'id_receta': 1, 'porcentaje': 50}, {'id_receta': 1, 'porcentaje': 50}]
        proyeccion = controller.create_projection(self.session, numero_usuario=1, nombre="Proyeccion 1", periodo="2025", comensales=4, recetas=recetas)

        ## Read the proyeccion from the database
        fetched_proyeccion = controller.get_projection(self.session, proyeccion.id_proyeccion)

        # Print the fetched proyeccion
        print(f"Proyeccion le√≠da con ID: {fetched_proyeccion.id_proyeccion}, nombre: {fetched_proyeccion.nombre}")

        ## Assert that the fetched proyeccion matches the created one.
        self.assertEqual(fetched_proyeccion.id_proyeccion, proyeccion.id_proyeccion)
        self.assertEqual(fetched_proyeccion.nombre, "Proyeccion 1")

    ## @brief Test updating a Proyeccion in the database.
    def test_update_proyeccion(self):
        ## Test updating a Proyeccion in the database.
        controller = ProyeccionController()
        recetas = [{'id_receta': 1, 'porcentaje': 50}, {'id_receta': 1, 'porcentaje': 50}]
        proyeccion = controller.create_projection(self.session, numero_usuario=1, nombre="Proyeccion 1", periodo="2025", comensales=4, recetas=recetas)

        ## Update the proyeccion's information
        controller.update_projection(self.session, proyeccion.id_proyeccion, nombre="Proyeccion Actualizada")

        # Fetch the updated proyeccion from the database
        updated_proyeccion = self.session.query(Proyeccion).filter_by(id_proyeccion=proyeccion.id_proyeccion).first()

        # Print the updated proyeccion
        print(f"Proyeccion actualizada con ID: {updated_proyeccion.id_proyeccion}, nombre: {updated_proyeccion.nombre}")

        ## Assert that the proyeccion's information was updated correctly.
        self.assertEqual(updated_proyeccion.nombre, "Proyeccion Actualizada")

    ## @brief Test deleting a Proyeccion from the database.
    def test_delete_proyeccion(self):
        ## Test deleting a Proyeccion from the database.
        controller = ProyeccionController()
        recetas = [{'id_receta': 1, 'porcentaje': 50}, {'id_receta': 1, 'porcentaje': 50}]
        proyeccion = controller.create_projection(self.session, numero_usuario=1, nombre="Proyeccion 1", periodo="2025", comensales=4, recetas=recetas)

        ## Delete the proyeccion from the database
        controller.delete_projection(self.session, proyeccion.id_proyeccion)

        # Print the deleted proyeccion
        print(f"Proyeccion borrada con ID: {proyeccion.id_proyeccion}")

        ## Assert that the proyeccion was deleted
        deleted_proyeccion = self.session.query(Proyeccion).filter_by(id_proyeccion=proyeccion.id_proyeccion).first()
        self.assertIsNone(deleted_proyeccion)

if __name__ == '__main__':
    unittest.main()
